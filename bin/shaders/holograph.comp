#version 430 core

layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

layout(std430, binding = 0) buffer in_color_buffer
{
	float colors[];
} color_buffer;

// P(t) = O + tD, where O is the origin and D is the direction.
struct Ray
{
	vec3 origin;
	vec3 direction;
};

struct Sphere
{
	vec3 center;
	float radius;
};

layout(std140, binding = 1) uniform in_ubo
{
	Sphere sphere;
	vec3 camera_position;
	float time;
} ubo;

float random_float()
{
	return fract(sin(ubo.time * (gl_GlobalInvocationID.x + 1) * (gl_GlobalInvocationID.y + 1)) * 1000000.0) / 1.5707;
}

struct Hit
{
	bool intersecting;
	vec3 point;
	vec3 normal;
};

Hit sphere_intersect(vec3 point, Sphere sphere)
{
	if(distance(point, sphere.center) < sphere.radius)
	{
		return Hit(true, point, normalize(point - sphere.center));
	}
	return Hit(false, vec3(0), vec3(0));
}

void main()
{
	ivec3 invocation = ivec3(gl_GlobalInvocationID.xyz);
	int buffer_index = invocation.z * 64 + invocation.y * 8 + invocation.x;

	vec2 screen = vec2(invocation.x - 0.5f + random_float() / 10.0f, invocation.y - 0.5f + random_float() / 10.0f);

	float fov = 1;
	float width = gl_NumWorkGroups.x * gl_WorkGroupSize.x;
	float height = gl_NumWorkGroups.y * gl_WorkGroupSize.y;
	float x =  (2.0 * (screen.x + 0.5) / width  - 1) * tan(fov / 2.0) * width / height;
	float y = -(2.0 * (screen.y + 0.5) / height - 1) * tan(fov / 2.0);

	vec3 point = vec3(ubo.camera_position + gl_GlobalInvocationID.xyz);

	Sphere sphere = Sphere(vec3(0.0, 0.0, -1), 3);

	float color = 0.0f;
	Hit hit = sphere_intersect(point, sphere);
	if(hit.intersecting)
	{
		vec3 light_position = vec3(-20.0f, 20.0f, 30.0f);
		vec3 light_direction = normalize(light_position - hit.point);
		color = clamp(dot(light_direction, hit.normal), 0.7f, 0.9f);
	}
	else
	{
		color = 0.0f;
	}

	// Code for a flicker across the grid which I spent too long on and don't like
	// the look of.
	// 
	//float volume = width * width * width;
	//float brightest_voxel = mod(ubo.time * volume * 12f, volume);
	//float dist_a = abs(buffer_index - brightest_voxel);
	//float dist_b;

	//if(buffer_index < brightest_voxel)
	//{
	//	dist_b = clamp(abs((brightest_voxel - volume) - buffer_index), 0.0f, volume * 0.1f);
	//}
	//else
	//{
	//	dist_b = clamp(abs((brightest_voxel + volume) - buffer_index), 0.0f, volume * 0.1f);
	//}

	//color += ((dist_a + dist_b) / volume) * 0.03f;

	color_buffer.colors[buffer_index] = color;
}
